% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/ggplots.R
\name{ggmaps}
\alias{ggmaps}
\title{\code{ggplot} maps}
\usage{
ggmaps(
  .mapdt,
  .map,
  .coast = NULL,
  .poly = NULL,
  .moorings = NULL,
  .path = NULL,
  .coast_tolerance = NULL,
  .coast_mask = FALSE,
  .map_mask_zero = FALSE,
  .trans_coast = 0.075,
  .trans_poly = 0.25,
  .geom_coast = list(),
  .geom_poly = list(),
  .geom_moorings = list(),
  .geom_path = list(),
  .scale_path = scale_colour_gradientn(colours = viridis::magma(100)),
  .xlim = NULL,
  .ylim = NULL,
  .zlim = NULL,
  .png_args = NULL,
  .verbose = TRUE
)
}
\arguments{
\item{.mapdt}{A \code{\link[data.table:data.table]{data.table::data.table}} that defines panel maps with the following columns:
\itemize{
\item \code{row}, \code{column} : row/column identifiers;
\item \code{file_ud}       : a \code{character} that defines the path to the map, readable by \code{\link[terra:rast]{terra::rast()}}, or \code{NA};
}}

\item{.map, .coast, .poly, .moorings}{Spatial layers.
\itemize{
\item \code{.map} is a \code{\link[terra:SpatRaster-class]{terra::SpatRaster}}. This is used to handle blank panels (panels where \code{.mapdt$file_ud} does not exist).
\item (optional) \code{.coast}, \code{.poly} Simple feature polygons (or similar) that define coastline and/or other relevant boundaries (e.g., a Marine Protected Area). Objects are coerced to simple features for plotting via \code{\link[sf:st_as_sf]{sf::st_as_sf()}}.
\item (optional) \code{.moorings} A \code{\link[data.table:data.table]{data.table::data.table}} of coordinates (in columns \code{receiver_x} and \code{receiver_y}).
}}

\item{.path}{A \code{\link[data.table:data.table]{data.table::data.table}} with movement path(s). This must contain the following columns:
\itemize{
\item \code{row}, \code{column} : row/column identifiers, as for \code{.mapdt};
\item \code{timestep}      : an \code{integer} vector of time steps for each position along a path;
\item \code{x}, \code{y}        : path coordinates on the \code{.map};
}

Note that only a subset of \code{row}/\code{column} combinations in \code{.mapdt} may be associated with paths. \code{row}/\code{column} combinations not in \code{.mapdt} are dropped with a \code{\link{warning}}.}

\item{.coast_tolerance, .coast_mask}{Spatial operations applied to spatial layers before plotting.
\itemize{
\item \code{.coast_tolerance} is a \code{double}, passed to \code{\link[sf:geos_unary]{sf::st_simplify()}}'s \code{dTolerance} argument to simplify the coastline before plotting (for improved speed).
\item \code{.coast_mask} is a logical variable that defines whether or not to mask each UD by \code{.coast}.
}}

\item{.map_mask_zero}{A \code{logical} variable that defines whether or not to set grid cells with a value of zero to \code{NA}. Under the default colour scheme, these cells then appear in white.}

\item{.trans_coast, .trans_poly}{Numbers that define the transparency of the coastline and the polygon on blank plots.}

\item{.geom_coast, .geom_poly, .geom_moorings, .geom_path}{Named \code{list}s, passed to \code{\link[ggplot2:ggsf]{ggplot2::geom_sf()}} or \code{\link[ggplot2:geom_path]{ggplot2::geom_path()}}, used to customise graphics.}

\item{.scale_path}{If \code{.path} is specified, \code{.scale_path} is a scale for the colour of the path.}

\item{.xlim, .ylim, .zlim}{(optional) Axis limits.}

\item{.png_args}{(optional) A named \code{list} of arguments, passed to \code{\link[grDevices:png]{grDevices::png()}}, to write the image to file.}

\item{.verbose}{User output control.}
}
\description{
This function produces multi-panel plots of \code{\link[terra:SpatRaster-class]{terra::SpatRaster}}s. It was designed to plot utilisation distributions (UDs) for multiple animals (rows) constructed by different algorithms (columns) in passive acoustic telemetry systems. UDs are expected to live on the disk.
}
\details{
By default, \code{.zlim} is defined for each map between the minimum and maximum values of that map, unless specified. The colour scheme is inherited from \code{getOption(terra.pal)}, if specified, or set to \code{grDevices::terrain.colors(256L, rev = TRUE)} otherwise. \code{.coast} is added as a polygon. Set \code{.coast$col} and \code{.coast$alpha} to set fill and transparency, respectively. \code{.trans_coast} sets transparency on blank panels (see below). \code{.poly} is added as a line; \code{.poly$col}, \code{.poly$alpha} set colour and transparency. \code{.trans_poly} sets transparency on blank panels. \code{.moorings} is added as points; \code{.path} is added as paths. All layers can be customised via \verb{geom_*()} \code{list}s, but note that these \code{list}s currently override transparency settings on blank panels. Blank panels (without a UD) are produced for any \code{.mapdt$file_ud} that doesn't exist (or \code{NA} elements). If \code{.coast}, \code{.poly} and/or \code{.moorings} are specified, these spatial layers are rendered partially transparent on such panels. \code{.path}(s) are added afterwards, coloured by timestep. Use \code{.scale_path} to change the colour scaling for paths. Submit an issue request for additional customisation options.
}
\examples{
library(data.table)
library(ggplot2)
library(patter)
library(proj.lapply)        # cl_lapply_workflow
library(spatial.extensions) # overwriteRaster

#### Set up example

# Define temporary directory
folder <- file.path(tempdir(), "ggmaps")
dir.create(folder)

# Define spatial datasets for example
map   <- dat_gebco()
coast <- dat_coast()
mpa   <- dat_mpa()
bb    <- terra::ext(map) - 3000
xlim <- bb[1:2]
ylim <- bb[3:4]

# Define example iteration dataset
iteration <- data.table(individual_id = c("A", "A", "A", "B", "B", "B"),
                        parameter_id = c(1, 2, 3, 1, 2, 3),
                        file_output = file.path(folder, paste0("ud-", 1:6, ".tif")))

# Run example workflow
# * For each unit, generate some maps
out <- cl_lapply_workflow(.iteration = iteration[c(1, 2, 3, 5, 6)],
                          .datasets = list(map = map),
                          .constructor = function(.sim, .datasets, .verbose, ...) {
                            .datasets
                          },
                          .algorithm = function(map) {
                            # This is a placeholder for a more complicated workflow
                            xy <- terra::spatSample(map, size = 50L,
                                                    xy = TRUE, na.rm = TRUE)
                            map_dens(.map = map, .coord = xy, .plot = FALSE)$ud
                          },
                          .write = overwriteRaster)

# Define mapdt
mapdt <- data.table(file_ud = iteration$file_output,
                    row     = iteration$individual_id,
                    column  = iteration$parameter_id)

#### Example (1): Plot map with default options
# Note that panel four is blank
ggmaps(mapdt, 
       .map = map, .xlim = xlim, .ylim = ylim)

#### Example (2): Add coastline
# * Note that the coastline in panel four is transparent
# * (optional) Simplify coastline for improved speed
ggmaps(mapdt, 
       .map = map, .xlim = xlim, .ylim = ylim,
       .coast = coast, 
       .coast_tolerance = 10, .coast_mask = TRUE)
# Adjust the coastline colour (fill) by specifying coast$col and coast$alpha
coast_green       <- coast
coast_green$col   <- "darkgreen"
coast_green$alpha <- 0.5
ggmaps(mapdt, 
       .map = map, .xlim = xlim, .ylim = ylim,
       .coast = coast_green, 
       .coast_tolerance = 10, .coast_mask = TRUE)
# Customise other options via .geom_coast
ggmaps(mapdt, 
       .map = map, .xlim = xlim, .ylim = ylim,
       .coast = coast_green, 
       .coast_tolerance = 10, .coast_mask = TRUE, 
       .geom_coast = list(linewidth = 0))
# To completely hide the coastline on blank panels, set:
# `.trans_coast = 0` & `linewidth = 0`
ggmaps(mapdt, 
       .map = map, .xlim = xlim, .ylim = ylim,
       .coast = coast_green, 
       .coast_tolerance = 10, .coast_mask = TRUE, 
       .trans_coast = 0,
       .geom_coast = list(linewidth = 0))

#### Example (3): Add polygon (e.g., MPA boundary)
# Note that the coastline in panel four is transparent
# Colours are specified via poly$col, poly$alpha as for coast
# Other options are specified via .geom_poly
ggmaps(mapdt,
       .map = map, .xlim = xlim, .ylim = ylim,
       .coast = coast, .coast_mask = TRUE,
       .poly = mpa, 
       .geom_poly = list(linewidth = 2))
# Hide the polygon on blank plots:
ggmaps(mapdt,
       .map = map, .xlim = xlim, .ylim = ylim,
       .coast = coast, .coast_mask = TRUE,
       .poly = mpa, 
       .trans_coast = 0,
       .geom_coast = list(linewidth = 0),
       .trans_poly = 0,
       .geom_poly = list(linewidth = 2))

#### Example (4) Add points e.g., acoustic receivers
# Note receivers are not added on blank panels
ggmaps(mapdt, 
       .map = map, .xlim = xlim, .ylim = ylim,
       .coast = coast, .coast_mask = TRUE,
       .moorings = dat_sim_moorings)
ggmaps(mapdt, 
       .map = map, .xlim = xlim, .ylim = ylim,
       .coast = coast, .coast_mask = TRUE,
       .moorings = dat_sim_moorings, 
       .geom_moorings = list(col = "red", shape = 4, size = 5))

#### Example (5) Add movement path(s)
# Define example movement paths for a couple of rows/columns
# (We assume there are no paths for blank panels)
paths <- rbind(
  data.table(row = "A", column = 1, 
             timestep = 1:3, 
             x = c(706864.4, 709374.7, 708224.2), 
             y = c(6250694, 6256238, 6264606)),
  data.table(row = "B", column = 2, 
             timestep = 1:3, 
             x = c(699333.5, 699281.2, 701373.1), 
             y = c(6268266, 6266645, 6267325)))
# Plot maps with movement paths
ggmaps(mapdt, 
       .map = map, .xlim = xlim, .ylim = ylim,
       .coast = coast, .coast_mask = TRUE,
       .moorings = dat_sim_moorings, 
       .path = paths)
# Update path colour scheme via .scale_path
ggmaps(mapdt, 
       .map = map, .xlim = xlim, .ylim = ylim,
       .coast = coast, .coast_mask = TRUE,
       .moorings = dat_sim_moorings, 
       .path = paths, 
       .scale_path = scale_colour_gradientn(colours = rainbow(100)))
# And/or customise via .geom_path
ggmaps(mapdt, 
       .map = map, .xlim = xlim, .ylim = ylim,
       .coast = coast, .coast_mask = TRUE,
       .moorings = dat_sim_moorings, 
       .path = paths, 
       .geom_path = list(linewidth = 1, arrow = grid::arrow(length = unit(0.2, "cm"))))

proj.file::dir_cleanup(folder)
}
\author{
Edward Lavender
}
