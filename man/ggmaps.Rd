% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/ggplots.R
\name{ggmaps}
\alias{ggmaps}
\title{\code{ggplot} maps}
\usage{
ggmaps(
  .mapdt,
  .map,
  .coast = NULL,
  .poly = NULL,
  .moorings = NULL,
  .coast_tolerance = NULL,
  .coast_mask = FALSE,
  .xlim = NULL,
  .ylim = NULL,
  .zlim = NULL,
  .png_args = NULL,
  .verbose = TRUE
)
}
\arguments{
\item{.mapdt}{A \code{\link{data.table}} that defines panel maps with the following columns:
\itemize{
\item \code{row}, \code{column} : row/column identifiers;
\item \code{file_ud}       : the path to the map, readable by \code{\link[terra:rast]{terra::rast()}};
}}

\item{.map, .coast, .poly, .moorings}{Spatial layers.
\itemize{
\item \code{.map} is a \code{\link[terra:SpatRaster-class]{terra::SpatRaster}}. This is used to handle blank panels (panels where \code{.mapdt$file_ud} does not exist).
\item (optional) \code{.coast}, \code{.poly} Simple feature polygons (or similar) that define coastline and/or other relevant boundaries (e.g., a Marine Protected Area). Objects are coerced to simple features for plotting via \code{\link[sf:st_as_sf]{sf::st_as_sf()}}.
\item (optional) \code{.moorings} A \code{\link{data.table}} of coordinates (in columns \code{receiver_x} and \code{receiver_y}).
}}

\item{.coast_tolerance, .coast_mask}{Spatial operations applied to spatial layers before plotting.
\itemize{
\item \code{.coast_tolerance} is a \code{double}, passed to \code{\link[sf:geos_unary]{sf::st_simplify()}}'s \code{dTolerance} argument to simplify the coastline before plotting (for improved speed).
\item \code{.coast_mask} is a logical variable that defines whether or not to mask each UD by \code{.coast}.
}}

\item{.xlim, .ylim, .zlim}{(optional) Axis limits.}

\item{.png_args}{(optional) A named \code{list} of arguments, passed to \code{\link[grDevices:png]{grDevices::png()}}, to write the image to file.}

\item{.verbose}{User output control.}
}
\description{
This function produces multi-panel plots of \code{\link[terra:SpatRaster-class]{terra::SpatRaster}}s. It was designed to plot utilisation distributions (UDs) for multiple animals (rows) constructed by different algorithms (columns) in passive acoustic telemetry systems. UDs are expected to live on the disk.
}
\details{
By default, \code{.zlim} is defined for each map between the minimum and maximum values of that map, unless specified. The colour scheme is inherited from \code{getOption(terra.pal)}, if specified, or set to \code{grDevices::terrain.colors(256L, rev = TRUE)} otherwise. Graphical properties for \code{.coast} and \code{.moorings} are set internally. \code{.poly} is added as a line. A \code{col} column can be included to set polygon colour; other properties are set internally. Blank panels (without a UD) are produced for any \code{.mapdt$file_ud} that doesn't exist. If \code{.coast}, \code{.poly} and/or \code{.moorings} are specified, these spatial layers are rendered partially transparent on such panels. Submit an issue request for additional customisation options.
}
\examples{
library(data.table)
library(ggplot2)
library(patter)
library(proj.lapply)        # cl_lapply_workflow
library(spatial.extensions) # overwriteRaster

#### Set up example

# Define temporary directory
folder <- file.path(tempdir(), "ggmaps")
dir.create(folder)

# Define spatial datasets for example
map   <- dat_gebco()
coast <- dat_coast()
mpa   <- dat_mpa()
bb    <- terra::ext(map) - 3000
xlim <- bb[1:2]
ylim <- bb[3:4]

# Define example iteration dataset
iteration <- data.table(individual_id = c("A", "A", "A", "B", "B", "B"),
                        parameter_id = c(1, 2, 3, 1, 2, 3),
                        file_output = file.path(folder, paste0("ud-", 1:6, ".tif")))

# Run example workflow
# * For each unit, generate some maps
out <- cl_lapply_workflow(.iteration = iteration[c(1, 2, 3, 5, 6)],
                          .datasets = list(map = map),
                          .constructor = function(.sim, .datasets, .verbose, ...) {
                            .datasets
                          },
                          .algorithm = function(map) {
                            # This is a placeholder for a more complicated workflow
                            xy <- terra::spatSample(map, size = 50L,
                                                    xy = TRUE, na.rm = TRUE)
                            map_dens(.map = map, .coord = xy, .plot = FALSE)$ud
                          },
                          .write = overwriteRaster)

#### Examples

# Define mapdt
mapdt <- data.table(file_ud = iteration$file_output,
                    row     = iteration$individual_id,
                    column  = iteration$parameter_id)

# Plot map with default options
# * Note that panel four is blank
ggmaps(mapdt, 
       .map = map, .xlim = xlim, .ylim = ylim)

# Add coastline
# * Note that the coastline in panel four is transparent
# * (optional) Simplify coastline for improved speed
ggmaps(mapdt, 
       .map = map, .xlim = xlim, .ylim = ylim,
       .coast = coast, 
       .coast_tolerance = 10, .coast_mask = TRUE)

# Add polygon (e.g., MPA boundary)
# * Note that the coastline in panel four is transparent
ggmaps(mapdt,
       .map = map, # .xlim = xlim, .ylim = ylim,
       .coast = coast, .coast_mask = TRUE,
       .poly = mpa)

# Add points e.g., acoustic receivers
# * Note panel four
ggmaps(mapdt, 
       .map = map, .xlim = xlim, .ylim = ylim,
       .coast = coast, .coast_mask = TRUE,
       .moorings = dat_sim_moorings)


proj.file::dir_cleanup(folder)
}
\author{
Edward Lavender
}
